version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: house_design_postgres_prod
    environment:
      POSTGRES_DB: ${DB_NAME:-house_design}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_secure_password_here}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d:ro
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - house_design_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: house_design_backend_prod
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-your_secure_password_here}
      - DB_NAME=${DB_NAME:-house_design}
      - DB_SSLMODE=disable
      - GIN_MODE=release
      - PORT=${BACKEND_PORT:-8080}
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    volumes:
      - ./backend/data/uploads:/app/data/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - house_design_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: house_design_frontend_prod
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - house_design_network

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: house_design_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - house_design_network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local

networks:
  house_design_network:
    driver: bridge